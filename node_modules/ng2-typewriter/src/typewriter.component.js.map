{"version":3,"file":"typewriter.component.js","sourceRoot":"","sources":["typewriter.component.ts"],"names":[],"mappings":";;;;;;;;;AAGA,OAAO,EAAE,SAAS,EAAU,KAAK,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAoB/E,IAAa,mBAAmB;IAC5B;QAIS,aAAQ,GAAwB,EAAE,CAAC;QAMnC,aAAQ,GAAY,KAAK,CAAC;QAM1B,eAAU,GAAW,GAAG,CAAC;QAMzB,gBAAW,GAAW,CAAC,CAAC;QAMxB,aAAQ,GAAW,IAAI,CAAC;QAMxB,UAAK,GAAW,CAAC,CAAC;QAMlB,UAAK,GAAW,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;QAEzC,yBAAoB,GAAW,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAE9C,qBAAgB,GAAW,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAE1C,WAAM,GAAW,GAAG,CAAC;QAOrB,gBAAW,GAAW,CAAC,CAAC,CAAC;QAElC,WAAM,GAAY,KAAK,CAAC;QAEd,cAAS,GAA0B,IAAI,YAAY,EAAE,CAAC;IAzDhD,CAAC;IAEjB,sCAAQ,GAAR,cAAa,CAAC;IA6Dd,oCAAM,GAAN,UAAO,MAAe;QAAtB,iBAUC;QATG,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;YACvB,UAAU,CACN;gBACI,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;YACrC,CAAC,EACD,IAAI,CAAC,WAAW,CACnB,CAAC;QACN,CAAC;IACL,CAAC;IACL,0BAAC;AAAD,CAAC,AA3ED,IA2EC;AAtEY;IAAR,KAAK,EAAE;;qDAAoC;AAMnC;IAAR,KAAK,EAAE;;qDAA2B;AAM1B;IAAR,KAAK,EAAE;;uDAA0B;AAMzB;IAAR,KAAK,EAAE;;wDAAyB;AAMxB;IAAR,KAAK,EAAE;;qDAAyB;AAMxB;IAAR,KAAK,EAAE;;kDAAmB;AAMlB;IAAR,KAAK,EAAE;;kDAA0C;AAEzC;IAAR,KAAK,EAAE;;iEAA+C;AAE9C;IAAR,KAAK,EAAE;;6DAA2C;AAE1C;IAAR,KAAK,EAAE;;mDAAsB;AAOrB;IAAR,KAAK,EAAE;;wDAA0B;AAIxB;IAAT,MAAM,EAAE;8BAAY,YAAY;sDAA+B;AA1DvD,mBAAmB;IAlB/B,SAAS,CAAC;QACP,QAAQ,EAAE,YAAY;QACtB,QAAQ,EAAE,scAMT;QACD,MAAM,EAAE,CAAC,kLAMR,CAAC;KACL,CAAC;;GAEW,mBAAmB,CA2E/B;SA3EY,mBAAmB","sourcesContent":["/**\n * Created by gale on 17-1-22.\n */\nimport { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { TypewriterContent } from \"./typewriter.content\";\n@Component({\n    selector: \"typewriter\",\n    template: `\n        <div g-typewriter [contents]=\"contents\" [speed]=\"speed\" [beforeType]=\"beforeType\" [beforeStart]=\"beforeStart\" [delay]=\"delay\"\n        [afterEnd]=\"afterEnd\" [erasable]=\"erasable\" [deletingAcceleration]=\"deletingAcceleration\" [deletingTopSpeed]=\"deletingTopSpeed\" (isDone)=\"onDone($event)\">\n            <span class=\"wrap\"></span>\n            <g-cursor [activated]=\"!isDone\">{{cursor}}</g-cursor>\n        </div>\n    `,\n    styles: [`\n        .special-typewriter {\n            color       : darkred;\n            font-family : Arial, Helvetica, sans-serif;\n            font-weight : bolder;\n        }\n    `]\n})\n\nexport class TypewriterComponent implements OnInit {\n    constructor() { }\n\n    ngOnInit() { }\n\n    @Input() contents: TypewriterContent[] = [];\n\n    /**\n     * If it's true, delete previous item of contents before typing next one out.\n     * @type {boolean}\n     */\n    @Input() erasable: boolean = false;\n\n    /**\n     * How long before the typewriter will start.\n     * @type {number}\n     */\n    @Input() beforeType: number = 500;\n\n    /**\n     * How long before every item of contents will be typed out.\n     * @type {number}\n     */\n    @Input() beforeStart: number = 0;\n\n    /**\n     * How long will be delayed after every item of contents is typed out.\n     * @type {number}\n     */\n    @Input() afterEnd: number = 1000;\n\n    /**\n     * How long the typewriter will be stopped in mid-sentence (default punctuations are \",\" and \";\").\n     * @type {number}\n     */\n    @Input() delay: number = 0;\n\n    /**\n     * Typing speed.\n     * @type {number}\n     */\n    @Input() speed: number = 100 - Math.random() * 80;\n\n    @Input() deletingAcceleration: number = this.speed / 8;\n\n    @Input() deletingTopSpeed: number = this.speed / 4;\n\n    @Input() cursor: string = \"_\";\n\n    /**\n     * How long the cursor will be disappeared after all the contents are typed out.\n     * If it <= 0, the cursor won't be disappeared.\n     * @type {number}\n     */\n    @Input() cursorDelay: number = -1;\n\n    isDone: boolean = false;\n\n    @Output() afterDone: EventEmitter<boolean> = new EventEmitter();\n\n    /**\n     * Deal with the appearance of the cursor after all contents are typed out.\n     * @param isDone\n     */\n    onDone(isDone: boolean): void {\n        if (this.cursorDelay > 0) {\n            setTimeout(\n                () => {\n                    this.isDone = isDone;\n                    this.afterDone.emit(this.isDone);\n                },\n                this.cursorDelay\n            );\n        }\n    }\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}