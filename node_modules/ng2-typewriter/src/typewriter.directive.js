var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, Input, Output, EventEmitter } from "@angular/core";
var TypewriterDirective = (function () {
    function TypewriterDirective(el) {
        this.el = el;
        this._loopNum = 0;
        this._index = 0;
        this._delay_ratio = (Math.sqrt(5) - 1) / 2;
        this._isDeleting = false;
        this._text_decorated = '';
        this._isDone = false;
        this._cur = -1;
        this._decorate_templates = [];
        this._default_special_class_name = 'special-typewriter';
        this._regex = /[,;]$/;
        this._contents = [];
        this._erasable = true;
        this._beforeType = 500;
        this._beforeStart = 0;
        this._afterEnd = 500;
        this._delay = this._afterEnd * this._delay_ratio;
        this._speed = 40;
        this._speed_clone = this._speed;
        this._deletingTopSpeed = 10;
        this._deletingAcceleration = 5;
        this.isDone = new EventEmitter();
    }
    TypewriterDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._target = this.el.nativeElement.querySelector('span.wrap');
        this._speed_clone = this._speed;
        setTimeout(function () { return _this.tick(); }, this._beforeType);
    };
    Object.defineProperty(TypewriterDirective.prototype, "contents", {
        set: function (contentsArray) {
            this._contents = contentsArray || this._contents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypewriterDirective.prototype, "erasable", {
        set: function (erasable) {
            this._erasable = erasable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypewriterDirective.prototype, "beforeType", {
        set: function (beforeType) {
            this._beforeType = Math.max(0, beforeType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypewriterDirective.prototype, "beforeStart", {
        set: function (beforeStart) {
            this._beforeStart = Math.max(0, beforeStart);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypewriterDirective.prototype, "afterEnd", {
        set: function (afterEnd) {
            this._afterEnd = Math.max(0, afterEnd);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypewriterDirective.prototype, "delay", {
        set: function (delay) {
            this._delay = Math.max(0, delay);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypewriterDirective.prototype, "speed", {
        set: function (speed) {
            this._speed = Math.max(0, speed);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypewriterDirective.prototype, "deletingAcceleration", {
        set: function (deletingAcceleration) {
            this._deletingAcceleration = Math.max(0, deletingAcceleration);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypewriterDirective.prototype, "deletingTopSpeed", {
        set: function (deletingTopSpeed) {
            this._deletingTopSpeed = Math.max(0, deletingTopSpeed);
        },
        enumerable: true,
        configurable: true
    });
    TypewriterDirective.prototype.tick = function () {
        var i = this._loopNum % this._contents.length;
        var tc = this._contents[i];
        var fullText = tc.content;
        if (i !== this._cur) {
            this._cur = i;
            this._set_decorate_templates(tc);
        }
        if (this._erasable) {
            this._deal_with_erasable(fullText);
        }
        else {
            this._deal_with_unerasable(fullText);
        }
    };
    TypewriterDirective.prototype._deal_with_erasable = function (fullText) {
        var delta = this._speed;
        if (this._isDeleting) {
            this._text_decorated = fullText.substring(0, this._text_decorated.length - 1);
            delta = this._get_deleting_speed();
            if (this._text_decorated === '') {
                this._isDeleting = false;
                this._loopNum++;
                this._speed_clone = this._speed;
                delta = this._beforeStart;
            }
        }
        else {
            this._text_decorated = fullText.substring(0, this._text_decorated.length + 1);
            if (this._text_decorated === fullText) {
                delta = this._afterEnd;
                this._isDeleting = true;
            }
        }
        this._show(delta);
    };
    TypewriterDirective.prototype._get_deleting_speed = function () {
        this._speed_clone -= this._deletingAcceleration;
        return Math.max(this._deletingTopSpeed, this._speed_clone);
    };
    TypewriterDirective.prototype._deal_with_unerasable = function (fullText) {
        var delta = this._speed;
        var tick_char;
        var origin_text;
        var className;
        origin_text = fullText.substring(0, this._index++);
        tick_char = origin_text.substr(-1);
        className = this._decorate_templates[Math.max(0, origin_text.length - 1)];
        this._text_decorated += this._render(tick_char, className);
        if (this._delay > 0 && origin_text.match(this._regex) && this._index > 1 && this._index <= fullText.length) {
            delta = this._delay;
        }
        else if (!this._erasable && origin_text === fullText) {
            this._loopNum++;
            this._index = 0;
            delta = this._afterEnd;
            if (this._loopNum < this._contents.length) {
                this._show(delta, true);
                return;
            }
            else {
                this._isDone = true;
                this.isDone.emit(this._isDone);
            }
        }
        this._show(delta);
    };
    TypewriterDirective.prototype._show = function (delta, breakLine) {
        var _this = this;
        this._target.innerHTML = this._text_decorated;
        if (breakLine) {
            this._text_decorated += '</br>';
            this._show(delta);
        }
        else if (!this._isDone) {
            setTimeout(function () { return _this.tick(); }, delta);
        }
    };
    TypewriterDirective.prototype._render = function (text, className) {
        return className ? '<span class="' + className + '">' + text + '</span>' : text;
    };
    TypewriterDirective.prototype._set_decorate_templates = function (tc) {
        var _this = this;
        var fullText = tc.content;
        var specialWords = tc.specialWords;
        var specialClasses = tc.specialClasses;
        var iterable = tc.iterable;
        this._decorate_templates = [];
        this._decorate_templates.length = fullText.length;
        specialWords.forEach(function (v, i) {
            var regex = _this._get_word_regex(v, 'g');
            if (iterable) {
                while (regex.exec(fullText)) {
                    _this._get_it_filled(specialClasses, i, regex.lastIndex, v.length);
                }
            }
            else {
                regex.exec(fullText);
                _this._get_it_filled(specialClasses, i, regex.lastIndex, v.length);
            }
        });
    };
    TypewriterDirective.prototype._get_word_regex = function (v, flag) {
        return flag && flag.length > 0 ? new RegExp('\\b' + v + '\\b', flag) : new RegExp('\\b' + v + '\\b');
    };
    TypewriterDirective.prototype._get_it_filled = function (classes, index, lastIndex, length) {
        for (var x = 1; x <= length; x++) {
            this._decorate_templates[lastIndex - x] = this._get_special_class_from(classes, index);
        }
    };
    TypewriterDirective.prototype._get_special_class_from = function (classes, at) {
        if (classes && classes.length) {
            if (at > classes.length) {
                return classes[0];
            }
            else {
                return classes[at];
            }
        }
        else {
            return this._default_special_class_name;
        }
    };
    return TypewriterDirective;
}());
__decorate([
    Output(),
    __metadata("design:type", Object)
], TypewriterDirective.prototype, "isDone", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], TypewriterDirective.prototype, "contents", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], TypewriterDirective.prototype, "erasable", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TypewriterDirective.prototype, "beforeType", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TypewriterDirective.prototype, "beforeStart", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TypewriterDirective.prototype, "afterEnd", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TypewriterDirective.prototype, "delay", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TypewriterDirective.prototype, "speed", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TypewriterDirective.prototype, "deletingAcceleration", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], TypewriterDirective.prototype, "deletingTopSpeed", null);
TypewriterDirective = __decorate([
    Directive({
        selector: '[g-typewriter]'
    }),
    __metadata("design:paramtypes", [ElementRef])
], TypewriterDirective);
export { TypewriterDirective };
//# sourceMappingURL=typewriter.directive.js.map