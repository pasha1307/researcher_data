{"version":3,"file":"typewriter.content.js","sourceRoot":"","sources":["typewriter.content.ts"],"names":[],"mappings":"AAGA;IACI,2BAAqB,QAAgB,EAAU,aAAwB,EAAU,eAA0B,EAAU,SAAmB;QAAnH,aAAQ,GAAR,QAAQ,CAAQ;QAAU,kBAAa,GAAb,aAAa,CAAW;QAAU,oBAAe,GAAf,eAAe,CAAW;QAAU,cAAS,GAAT,SAAS,CAAU;QAQpI,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAyBzB,IAAI,CAAC,aAAa,GAAG,aAAa,IAAI,EAAE,CAAC;QACzC,IAAI,CAAC,eAAe,GAAG,eAAe,IAAI,EAAE,CAAC;QAQ7C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAED,sBAAW,sCAAO;aAAlB;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;aAcD,UAAoB,OAAe;YAC/B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAC5B,CAAC;;;OAhBA;IAED,sBAAW,2CAAY;aAAvB;YACI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC9B,CAAC;aAcD,UAAyB,YAAsB;YAC3C,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QACtC,CAAC;;;OAhBA;IAED,sBAAW,6CAAc;aAAzB;YACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QAChC,CAAC;aAcD,UAA2B,cAAwB;YAC/C,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QAC1C,CAAC;;;OAhBA;IAED,sBAAW,uCAAQ;aAAnB;YACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;aAcD,UAAqB,QAAiB;YAClC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC9B,CAAC;;;OAhBA;IAkBM,0CAAc,GAArB,UAAuB,WAAmB;QACtC,EAAE,CAAC,CAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC;YAClD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC;IACL,CAAC;IAEM,2CAAe,GAAtB,UAAwB,YAAoB;QACxC,EAAE,CAAC,CAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC3C,CAAC;IACL,CAAC;IACL,wBAAC;AAAD,CAAC,AAzFD,IAyFC","sourcesContent":["/**\n * Created by gale on 17-1-11.\n */\nexport class TypewriterContent {\n    constructor( private _content: string, private _specialWords?: string[], private _specialClasses?: string[], private _iterable?: boolean ) {\n        /**\n         * The content of this TypewriterContent.\n         *\n         * If the typewriter is configured as unerasable, then every item in this array will be typed out as an individual line.\n         * @type {string}\n         * @private\n         */\n        this._content = _content;\n\n        /**\n         * Every word in this array will be surrounded by a span tag char by char, and the corresponding special class will be used.\n         * e.g.:\n         *      content = \"One world, one dream.\";\n         *      specialWords = [\"world\", \"dream\"];\n         *      specialClasses = [\"green-world\", \"red-dream\"];\n         *      outputs:\n         *          One <span class=\"green-world\">w</span>\n         *          <span class=\"green-world\">o</span>\n         *          <span class=\"green-world\">r</span>\n         *          <span class=\"green-world\">l</span>\n         *          <span class=\"green-world\">d</span>, one<span class=\"red-dream\">d</span>\n         *          <span class=\"red-dream\">r</span>\n         *          <span class=\"red-dream\">e</span>\n         *          <span class=\"red-dream\">a</span>\n         *          <span class=\"red-dream\">m</span>.\n         *      and if the special-class-2 is omitted, the first class of specialClasses will be used as default.\n         *      and if all the special classes are omitted, which means specialClasses = [];\n         *          then the default class named \"special-typewriter\" will be used as default.\n         *          Of course, users can freely override this class with their own class if the don't like it.\n         * @type {string[]|Array}\n         * @private\n         */\n        this._specialWords = _specialWords || [];\n        this._specialClasses = _specialClasses || [];\n\n        /**\n         * If one of the special words shows up more than once within the content,\n         *   true to make all of them specialized, false to just decorate the first one.\n         * @type {boolean}\n         * @private\n         */\n        this._iterable = _iterable;\n    }\n\n    public get content(): string {\n        return this._content;\n    }\n\n    public get specialWords(): string[] {\n        return this._specialWords;\n    }\n\n    public get specialClasses(): string[] {\n        return this._specialClasses;\n    }\n\n    public get iterable(): boolean {\n        return this._iterable;\n    }\n\n    public set content( content: string ) {\n        this._content = content;\n    }\n\n    public set specialWords( specialWords: string[] ) {\n        this._specialWords = specialWords;\n    }\n\n    public set specialClasses( specialClasses: string[] ) {\n        this._specialClasses = specialClasses;\n    }\n\n    public set iterable( iterable: boolean ) {\n        this._iterable = iterable;\n    }\n\n    public setSpecialWord( specialWord: string ): void {\n        if ( this.specialWords.indexOf(specialWord) === -1 ) {\n            this.specialWords.push(specialWord);\n        }\n    }\n\n    public setSpecialClass( specialClass: string ): void {\n        if ( this.specialClasses.indexOf(specialClass) === -1 ) {\n            this.specialClasses.push(specialClass);\n        }\n    }\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}